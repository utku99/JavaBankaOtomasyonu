package View;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import org.mariadb.jdbc.internal.com.read.resultset.UpdatableResultSet;

import Model.*;

import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;

import java.awt.Font;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;

import javax.swing.JButton;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import Helper.*;
import javax.swing.JComboBox;

public class PersonelGUI extends JFrame {

	static Personel personel = new Personel();
	private JPanel w_pane;
	private JTextField fld_ekleMüþteriName;
	private JTextField fld_ekleMüþteriTc;
	private JTextField fld_ekleMüþteriPass;
	private JTextField fld_SilMüþteri;
	private JTable table_müþteri;
	private DefaultTableModel müþteriModel = null;
	private Object[] müþteriData = null;
	

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					PersonelGUI frame = new PersonelGUI(personel);
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 * 
	 * @throws SQLException
	 */
	public PersonelGUI(Personel personel) throws SQLException {

		müþteriModel = new DefaultTableModel();
		Object[] colMüþteriName = new Object[4];
		colMüþteriName[0] = "ID";
		colMüþteriName[1] = "Ad Soyad";
		colMüþteriName[2] = "TC No";
		colMüþteriName[3] = "Þifre";
		müþteriModel.setColumnIdentifiers(colMüþteriName);
		müþteriData = new Object[4];
		for (int i = 0; i < personel.getMüþteriList().size(); i++) {
			müþteriData[0] = personel.getMüþteriList().get(i).getId();
			müþteriData[1] = personel.getMüþteriList().get(i).getName();
			müþteriData[2] = personel.getMüþteriList().get(i).getTcno();
			müþteriData[3] = personel.getMüþteriList().get(i).getPassword();
			müþteriModel.addRow(müþteriData);
		}

		
		setTitle("Admin Yönetim Sistemi");
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 750, 500);
		w_pane = new JPanel();
		w_pane.setBackground(Color.WHITE);
		w_pane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(w_pane);
		w_pane.setLayout(null);

		JLabel lblNewLabel = new JLabel("Hoþgeldiniz, Sayýn " + personel.getName());
		lblNewLabel.setBounds(10, 11, 283, 24);
		lblNewLabel.setFont(new Font("Yu Gothic UI Semibold", Font.PLAIN, 16));
		w_pane.add(lblNewLabel);

		JTabbedPane w_tab = new JTabbedPane(JTabbedPane.TOP);
		w_tab.setBounds(10, 90, 713, 359);
		w_pane.add(w_tab);

		JPanel w_personel = new JPanel();
		w_personel.setBackground(Color.WHITE);
		w_personel.setToolTipText("");
		w_tab.addTab("Personel Yönetimi", null, w_personel, null);
		w_personel.setLayout(null);

		JLabel label = new JLabel("Ad Soyad");
		label.setFont(new Font("Yu Gothic UI Semibold", Font.PLAIN, 14));
		label.setBounds(508, 11, 89, 25);
		w_personel.add(label);

		fld_ekleMüþteriName = new JTextField();
		fld_ekleMüþteriName.setBounds(508, 36, 177, 25);
		w_personel.add(fld_ekleMüþteriName);
		fld_ekleMüþteriName.setColumns(10);

		JLabel label_1 = new JLabel("T.C. No");
		label_1.setFont(new Font("Yu Gothic UI Semibold", Font.PLAIN, 14));
		label_1.setBounds(508, 62, 89, 25);
		w_personel.add(label_1);

		fld_ekleMüþteriTc = new JTextField();
		fld_ekleMüþteriTc.setColumns(10);
		fld_ekleMüþteriTc.setBounds(508, 87, 177, 25);
		w_personel.add(fld_ekleMüþteriTc);

		JLabel label_2 = new JLabel("\u015Eifre");
		label_2.setFont(new Font("Yu Gothic UI Semibold", Font.PLAIN, 14));
		label_2.setBounds(508, 111, 89, 25);
		w_personel.add(label_2);

		fld_ekleMüþteriPass = new JTextField();
		fld_ekleMüþteriPass.setColumns(10);
		fld_ekleMüþteriPass.setBounds(508, 136, 177, 25);
		w_personel.add(fld_ekleMüþteriPass);

		JButton btn_addMüþteri = new JButton("Ekle");
		btn_addMüþteri.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (fld_ekleMüþteriName.getText().length() == 0 || fld_ekleMüþteriPass.getText().length() == 0
						|| fld_ekleMüþteriTc.getText().length() == 0) {
					Helper.showMsg("fill");
				} else {
					try {
						boolean control = personel.addMüþteri(fld_ekleMüþteriTc.getText(), fld_ekleMüþteriPass.getText(),
								fld_ekleMüþteriName.getText());
						if (control) {
							Helper.showMsg("succes");
							fld_ekleMüþteriName.setText(null);
							fld_ekleMüþteriTc.setText(null);
							fld_ekleMüþteriPass.setText(null);
							updateMüþteriModel();
						}
					} catch (SQLException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
			}
		});

		btn_addMüþteri.setFont(new Font("Yu Gothic UI Semibold", Font.PLAIN, 14));
		btn_addMüþteri.setBounds(508, 172, 177, 29);
		w_personel.add(btn_addMüþteri);

		JLabel label_3 = new JLabel("Kullan\u0131c\u0131 ID");
		label_3.setFont(new Font("Yu Gothic UI Semibold", Font.PLAIN, 14));
		label_3.setBounds(508, 212, 89, 25);
		w_personel.add(label_3);

		fld_SilMüþteri = new JTextField();
		fld_SilMüþteri.setColumns(10);
		fld_SilMüþteri.setBounds(508, 238, 177, 25);
		w_personel.add(fld_SilMüþteri);

		JButton btn_delMüþteri = new JButton("Sil");
		btn_delMüþteri.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				 
					int selectID = Integer.parseInt(fld_SilMüþteri.getText());
					try {
						boolean control = personel.deleteMüþteri(selectID);
						if (control) {
							Helper.showMsg("succes");
							fld_SilMüþteri.setText(null);
							updateMüþteriModel();
						}
					} catch (SQLException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				

			}
		});
		
		btn_delMüþteri.setFont(new Font("Yu Gothic UI Semibold", Font.PLAIN, 14));
		btn_delMüþteri.setBounds(508, 274, 177, 29);
		w_personel.add(btn_delMüþteri);

		JScrollPane w_scrollMüþteri = new JScrollPane();
		w_scrollMüþteri.setBounds(0, 17, 490, 309);
		w_personel.add(w_scrollMüþteri);
		
		
		table_müþteri = new JTable(müþteriModel);
		w_scrollMüþteri.setViewportView(table_müþteri);
		table_müþteri.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

			@Override
			public void valueChanged(ListSelectionEvent e) {
				try {
					fld_SilMüþteri.setText(table_müþteri.getValueAt(table_müþteri.getSelectedRow(), 0).toString());
				} catch (Exception ex) {

				}

			}
		});

		table_müþteri.getModel().addTableModelListener(new TableModelListener() {

			@Override
			public void tableChanged(TableModelEvent e) {
				if (e.getType() == TableModelEvent.UPDATE) {
					int selectID = Integer.parseInt(table_müþteri.getValueAt(table_müþteri.getSelectedRow(), 0).toString());
					String selectName = table_müþteri.getValueAt(table_müþteri.getSelectedRow(), 1).toString();
					String selectTcno = table_müþteri.getValueAt(table_müþteri.getSelectedRow(), 2).toString();
					String selectPass = table_müþteri.getValueAt(table_müþteri.getSelectedRow(), 3).toString();

					try {
						boolean control = personel.updateMüþteri(selectID, selectTcno, selectPass, selectName);
					} catch (SQLException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}

			}
		});



		
		
	}

	public void updateMüþteriModel() throws SQLException {
		DefaultTableModel clearModel = (DefaultTableModel) table_müþteri.getModel();
		clearModel.setRowCount(0);
		for (int i = 0; i < personel.getMüþteriList().size(); i++) {
			müþteriData[0] = personel.getMüþteriList().get(i).getId();
			müþteriData[1] = personel.getMüþteriList().get(i).getName();
			müþteriData[2] = personel.getMüþteriList().get(i).getTcno();
			müþteriData[3] = personel.getMüþteriList().get(i).getPassword();
			müþteriModel.addRow(müþteriData);
		}
	}

}
